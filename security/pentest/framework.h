#ifndef GHOST_PENTEST_FRAMEWORK_H
#define GHOST_PENTEST_FRAMEWORK_H

#include <stdint.h>
#include "../core/security_core.h"

// Penetration Testing Framework Components
typedef struct {
    // Network Analysis
    struct {
        void (*packet_capture)(const char* interface);
        void (*protocol_analysis)(uint8_t* packet_data);
        void (*vulnerability_scan)(const char* target);
    } network;
    
    // Exploit Development
    struct {
        void (*pattern_generation)(size_t length);
        void (*shellcode_testing)(uint8_t* shellcode, size_t size);
        void (*rop_chain_builder)(void** gadgets, size_t count);
    } exploit;
    
    // System Analysis
    struct {
        void (*memory_scanner)(uintptr_t start, size_t size);
        void (*process_analyzer)(pid_t pid);
        void (*syscall_monitor)(void);
    } system;
    
    // Security Assessment
    struct {
        void (*port_scanner)(const char* target);
        void (*service_enumeration)(const char* host);
        void (*vulnerability_assessment)(const char* target);
    } assessment;
    
    // Learning Tools
    struct {
        void (*explain_vulnerability)(const char* vuln_type);
        void (*demonstrate_exploit)(const char* exploit_name);
        void (*security_best_practices)(void);
    } education;
} pentest_framework_t;

// Framework Initialization
void pentest_framework_init(void);
void register_custom_module(const char* name, void* module_ptr);

// Educational Functions
void demonstrate_attack_vector(const char* vector_name);
void analyze_vulnerability(const char* vulnerability);
void practice_exploit_development(void);

// Security Assessment
void run_security_audit(const char* target);
void generate_security_report(const char* output_file);

// Safety Controls
void enable_safe_mode(void);
void set_target_restrictions(const char* restrictions);
void validate_operation_safety(const char* operation);

#endif // GHOST_PENTEST_FRAMEWORK_H
